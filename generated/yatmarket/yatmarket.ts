// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BidAccepted extends ethereum.Event {
  get params(): BidAccepted__Params {
    return new BidAccepted__Params(this);
  }
}

export class BidAccepted__Params {
  _event: BidAccepted;

  constructor(event: BidAccepted) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BidCreated extends ethereum.Event {
  get params(): BidCreated__Params {
    return new BidCreated__Params(this);
  }
}

export class BidCreated__Params {
  _event: BidCreated;

  constructor(event: BidCreated) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get status(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class BidStatusUpdated extends ethereum.Event {
  get params(): BidStatusUpdated__Params {
    return new BidStatusUpdated__Params(this);
  }
}

export class BidStatusUpdated__Params {
  _event: BidStatusUpdated;

  constructor(event: BidStatusUpdated) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class FilledListing extends ethereum.Event {
  get params(): FilledListing__Params {
    return new FilledListing__Params(this);
  }
}

export class FilledListing__Params {
  _event: FilledListing;

  constructor(event: FilledListing) {
    this._event = event;
  }

  get listing(): FilledListingListingStruct {
    return changetype<FilledListingListingStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class FilledListingListingStruct extends ethereum.Tuple {
  get listing(): FilledListingListingListingStruct {
    return changetype<FilledListingListingListingStruct>(this[0].toTuple());
  }

  get buyer(): Address {
    return this[1].toAddress();
  }
}

export class FilledListingListingListingStruct extends ethereum.Tuple {
  get active(): boolean {
    return this[0].toBoolean();
  }

  get listingId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get activeIndex(): BigInt {
    return this[4].toBigInt();
  }

  get userActiveIndex(): BigInt {
    return this[5].toBigInt();
  }

  get owner(): Address {
    return this[6].toAddress();
  }

  get tokenURI(): string {
    return this[7].toString();
  }
}

export class ListingCancelled extends ethereum.Event {
  get params(): ListingCancelled__Params {
    return new ListingCancelled__Params(this);
  }
}

export class ListingCancelled__Params {
  _event: ListingCancelled;

  constructor(event: ListingCancelled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get active(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ListingCreated extends ethereum.Event {
  get params(): ListingCreated__Params {
    return new ListingCreated__Params(this);
  }
}

export class ListingCreated__Params {
  _event: ListingCreated;

  constructor(event: ListingCreated) {
    this._event = event;
  }

  get active(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get tokenURI(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class ListingFilled extends ethereum.Event {
  get params(): ListingFilled__Params {
    return new ListingFilled__Params(this);
  }
}

export class ListingFilled__Params {
  _event: ListingFilled;

  constructor(event: ListingFilled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get active(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ListingUpdated extends ethereum.Event {
  get params(): ListingUpdated__Params {
    return new ListingUpdated__Params(this);
  }
}

export class ListingUpdated__Params {
  _event: ListingUpdated;

  constructor(event: ListingUpdated) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class yatmarket__bidsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }
}

export class yatmarket__getActiveListingsResultListingStruct extends ethereum.Tuple {
  get active(): boolean {
    return this[0].toBoolean();
  }

  get listingId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get activeIndex(): BigInt {
    return this[4].toBigInt();
  }

  get userActiveIndex(): BigInt {
    return this[5].toBigInt();
  }

  get owner(): Address {
    return this[6].toAddress();
  }

  get tokenURI(): string {
    return this[7].toString();
  }
}

export class yatmarket__getMyActiveListingsResultListingStruct extends ethereum.Tuple {
  get active(): boolean {
    return this[0].toBoolean();
  }

  get listingId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get activeIndex(): BigInt {
    return this[4].toBigInt();
  }

  get userActiveIndex(): BigInt {
    return this[5].toBigInt();
  }

  get owner(): Address {
    return this[6].toAddress();
  }

  get tokenURI(): string {
    return this[7].toString();
  }
}

export class yatmarket__listingsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: string;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    return map;
  }
}

export class yatmarket extends ethereum.SmartContract {
  static bind(address: Address): yatmarket {
    return new yatmarket("yatmarket", address);
  }

  activeListings(param0: BigInt): BigInt {
    let result = super.call(
      "activeListings",
      "activeListings(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_activeListings(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeListings",
      "activeListings(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bids(param0: BigInt, param1: BigInt): yatmarket__bidsResult {
    let result = super.call(
      "bids",
      "bids(uint256,uint256):(uint256,uint256,uint256,address,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new yatmarket__bidsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toI32()
    );
  }

  try_bids(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<yatmarket__bidsResult> {
    let result = super.tryCall(
      "bids",
      "bids(uint256,uint256):(uint256,uint256,uint256,address,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new yatmarket__bidsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toI32()
      )
    );
  }

  emergencyDelisting(): boolean {
    let result = super.call(
      "emergencyDelisting",
      "emergencyDelisting():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_emergencyDelisting(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "emergencyDelisting",
      "emergencyDelisting():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getActiveListings(
    from: BigInt,
    length: BigInt
  ): Array<yatmarket__getActiveListingsResultListingStruct> {
    let result = super.call(
      "getActiveListings",
      "getActiveListings(uint256,uint256):((bool,uint256,uint256,uint256,uint256,uint256,address,string)[])",
      [
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(length)
      ]
    );

    return result[0].toTupleArray<
      yatmarket__getActiveListingsResultListingStruct
    >();
  }

  try_getActiveListings(
    from: BigInt,
    length: BigInt
  ): ethereum.CallResult<
    Array<yatmarket__getActiveListingsResultListingStruct>
  > {
    let result = super.tryCall(
      "getActiveListings",
      "getActiveListings(uint256,uint256):((bool,uint256,uint256,uint256,uint256,uint256,address,string)[])",
      [
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(length)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<yatmarket__getActiveListingsResultListingStruct>()
    );
  }

  getMyActiveListings(
    from: BigInt,
    length: BigInt
  ): Array<yatmarket__getMyActiveListingsResultListingStruct> {
    let result = super.call(
      "getMyActiveListings",
      "getMyActiveListings(uint256,uint256):((bool,uint256,uint256,uint256,uint256,uint256,address,string)[])",
      [
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(length)
      ]
    );

    return result[0].toTupleArray<
      yatmarket__getMyActiveListingsResultListingStruct
    >();
  }

  try_getMyActiveListings(
    from: BigInt,
    length: BigInt
  ): ethereum.CallResult<
    Array<yatmarket__getMyActiveListingsResultListingStruct>
  > {
    let result = super.tryCall(
      "getMyActiveListings",
      "getMyActiveListings(uint256,uint256):((bool,uint256,uint256,uint256,uint256,uint256,address,string)[])",
      [
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(length)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<yatmarket__getMyActiveListingsResultListingStruct>()
    );
  }

  getMyActiveListingsCount(): BigInt {
    let result = super.call(
      "getMyActiveListingsCount",
      "getMyActiveListingsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMyActiveListingsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMyActiveListingsCount",
      "getMyActiveListingsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenOwner(tokenId: BigInt): Address {
    let result = super.call(
      "getTokenOwner",
      "getTokenOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toAddress();
  }

  try_getTokenOwner(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenOwner",
      "getTokenOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  highestSalePrice(): BigInt {
    let result = super.call(
      "highestSalePrice",
      "highestSalePrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_highestSalePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "highestSalePrice",
      "highestSalePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMarketOpen(): boolean {
    let result = super.call("isMarketOpen", "isMarketOpen():(bool)", []);

    return result[0].toBoolean();
  }

  try_isMarketOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMarketOpen", "isMarketOpen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  listings(param0: BigInt): yatmarket__listingsResult {
    let result = super.call(
      "listings",
      "listings(uint256):(bool,uint256,uint256,uint256,uint256,uint256,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new yatmarket__listingsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toString()
    );
  }

  try_listings(param0: BigInt): ethereum.CallResult<yatmarket__listingsResult> {
    let result = super.tryCall(
      "listings",
      "listings(uint256):(bool,uint256,uint256,uint256,uint256,uint256,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new yatmarket__listingsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toString()
      )
    );
  }

  marketFeePercent(): BigInt {
    let result = super.call(
      "marketFeePercent",
      "marketFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_marketFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketFeePercent",
      "marketFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenListings(param0: BigInt): BigInt {
    let result = super.call(
      "tokenListings",
      "tokenListings(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenListings(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenListings",
      "tokenListings(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalActiveListings(): BigInt {
    let result = super.call(
      "totalActiveListings",
      "totalActiveListings():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalActiveListings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalActiveListings",
      "totalActiveListings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalListings(): BigInt {
    let result = super.call("totalListings", "totalListings():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalListings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalListings",
      "totalListings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSales(): BigInt {
    let result = super.call("totalSales", "totalSales():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSales(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSales", "totalSales():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVolume(): BigInt {
    let result = super.call("totalVolume", "totalVolume():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalVolume(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalVolume", "totalVolume():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userActiveListings(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userActiveListings",
      "userActiveListings(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userActiveListings(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userActiveListings",
      "userActiveListings(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawableBalance(): BigInt {
    let result = super.call(
      "withdrawableBalance",
      "withdrawableBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawableBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawableBalance",
      "withdrawableBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get nft_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get market_fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AcceptBidCall extends ethereum.Call {
  get inputs(): AcceptBidCall__Inputs {
    return new AcceptBidCall__Inputs(this);
  }

  get outputs(): AcceptBidCall__Outputs {
    return new AcceptBidCall__Outputs(this);
  }
}

export class AcceptBidCall__Inputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AcceptBidCall__Outputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }
}

export class AddListingCall extends ethereum.Call {
  get inputs(): AddListingCall__Inputs {
    return new AddListingCall__Inputs(this);
  }

  get outputs(): AddListingCall__Outputs {
    return new AddListingCall__Outputs(this);
  }
}

export class AddListingCall__Inputs {
  _call: AddListingCall;

  constructor(call: AddListingCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddListingCall__Outputs {
  _call: AddListingCall;

  constructor(call: AddListingCall) {
    this._call = call;
  }
}

export class AdjustFeesCall extends ethereum.Call {
  get inputs(): AdjustFeesCall__Inputs {
    return new AdjustFeesCall__Inputs(this);
  }

  get outputs(): AdjustFeesCall__Outputs {
    return new AdjustFeesCall__Outputs(this);
  }
}

export class AdjustFeesCall__Inputs {
  _call: AdjustFeesCall;

  constructor(call: AdjustFeesCall) {
    this._call = call;
  }

  get newMarketFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AdjustFeesCall__Outputs {
  _call: AdjustFeesCall;

  constructor(call: AdjustFeesCall) {
    this._call = call;
  }
}

export class AllowEmergencyDelistingCall extends ethereum.Call {
  get inputs(): AllowEmergencyDelistingCall__Inputs {
    return new AllowEmergencyDelistingCall__Inputs(this);
  }

  get outputs(): AllowEmergencyDelistingCall__Outputs {
    return new AllowEmergencyDelistingCall__Outputs(this);
  }
}

export class AllowEmergencyDelistingCall__Inputs {
  _call: AllowEmergencyDelistingCall;

  constructor(call: AllowEmergencyDelistingCall) {
    this._call = call;
  }
}

export class AllowEmergencyDelistingCall__Outputs {
  _call: AllowEmergencyDelistingCall;

  constructor(call: AllowEmergencyDelistingCall) {
    this._call = call;
  }
}

export class CancelBidCall extends ethereum.Call {
  get inputs(): CancelBidCall__Inputs {
    return new CancelBidCall__Inputs(this);
  }

  get outputs(): CancelBidCall__Outputs {
    return new CancelBidCall__Outputs(this);
  }
}

export class CancelBidCall__Inputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelBidCall__Outputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class CloseMarketCall extends ethereum.Call {
  get inputs(): CloseMarketCall__Inputs {
    return new CloseMarketCall__Inputs(this);
  }

  get outputs(): CloseMarketCall__Outputs {
    return new CloseMarketCall__Outputs(this);
  }
}

export class CloseMarketCall__Inputs {
  _call: CloseMarketCall;

  constructor(call: CloseMarketCall) {
    this._call = call;
  }
}

export class CloseMarketCall__Outputs {
  _call: CloseMarketCall;

  constructor(call: CloseMarketCall) {
    this._call = call;
  }
}

export class EmergencyDelistCall extends ethereum.Call {
  get inputs(): EmergencyDelistCall__Inputs {
    return new EmergencyDelistCall__Inputs(this);
  }

  get outputs(): EmergencyDelistCall__Outputs {
    return new EmergencyDelistCall__Outputs(this);
  }
}

export class EmergencyDelistCall__Inputs {
  _call: EmergencyDelistCall;

  constructor(call: EmergencyDelistCall) {
    this._call = call;
  }

  get listingID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyDelistCall__Outputs {
  _call: EmergencyDelistCall;

  constructor(call: EmergencyDelistCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class FulfillListingCall extends ethereum.Call {
  get inputs(): FulfillListingCall__Inputs {
    return new FulfillListingCall__Inputs(this);
  }

  get outputs(): FulfillListingCall__Outputs {
    return new FulfillListingCall__Outputs(this);
  }
}

export class FulfillListingCall__Inputs {
  _call: FulfillListingCall;

  constructor(call: FulfillListingCall) {
    this._call = call;
  }

  get listingIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class FulfillListingCall__Outputs {
  _call: FulfillListingCall;

  constructor(call: FulfillListingCall) {
    this._call = call;
  }
}

export class OpenMarketCall extends ethereum.Call {
  get inputs(): OpenMarketCall__Inputs {
    return new OpenMarketCall__Inputs(this);
  }

  get outputs(): OpenMarketCall__Outputs {
    return new OpenMarketCall__Outputs(this);
  }
}

export class OpenMarketCall__Inputs {
  _call: OpenMarketCall;

  constructor(call: OpenMarketCall) {
    this._call = call;
  }
}

export class OpenMarketCall__Outputs {
  _call: OpenMarketCall;

  constructor(call: OpenMarketCall) {
    this._call = call;
  }
}

export class PlaceBidCall extends ethereum.Call {
  get inputs(): PlaceBidCall__Inputs {
    return new PlaceBidCall__Inputs(this);
  }

  get outputs(): PlaceBidCall__Outputs {
    return new PlaceBidCall__Outputs(this);
  }
}

export class PlaceBidCall__Inputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PlaceBidCall__Outputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateListingCall extends ethereum.Call {
  get inputs(): UpdateListingCall__Inputs {
    return new UpdateListingCall__Inputs(this);
  }

  get outputs(): UpdateListingCall__Outputs {
    return new UpdateListingCall__Outputs(this);
  }
}

export class UpdateListingCall__Inputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateListingCall__Outputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall extends ethereum.Call {
  get inputs(): WithdrawBalanceCall__Inputs {
    return new WithdrawBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCall__Outputs {
    return new WithdrawBalanceCall__Outputs(this);
  }
}

export class WithdrawBalanceCall__Inputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall__Outputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}
